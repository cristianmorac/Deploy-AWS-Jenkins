pipeline {

    agent any

    tools {
        nodejs 'Node-app'
    }

    environment {
        SONARQUBE = 'SonarQube-Server'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install dependencies & test') {
            steps {
                dir('app-front') {
                    sh '''
                        if [ -f package-lock.json ]; then
                            npm ci
                        else
                            echo "‚ö†Ô∏è package-lock.json no encontrado, usando npm install"
                            npm install
                        fi

                        npm test -- --coverage --watchAll=false
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'TOKEN_SONAR', variable:'TOKEN')]) {
                    withSonarQubeEnv(SONARQUBE) {
                        dir('app-front') {
                            sh """
                                sonar-scanner -Dsonar.token=$TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage ('build app') {
            steps {
                build job: 'pipeline-build', wait: true
            }
        }
    }

    post {
        failure {
            echo 'Pipeline fall√≥ ‚ùå ‚Äî verifica los logs.'
        }
        success {
            echo 'Pipeline completado con √©xito üéâ'
        }
    }
}
