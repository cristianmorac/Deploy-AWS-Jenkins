pipeline {
    agent any

    tools {
    nodejs 'Node-app'
}

    environment {
        SONAR_HOST_URL = 'http://localhost:9000'
        USER_DOCKER = 'tlian0206'
        IMAGE_NAME="app-front"
        BUILD_NUMBER="${env.BUILD_NUMBER}"
    }

    stages {
        stage('checkout'){
            steps {
                checkout scm
            }
        }

        stage('install dependencies & Test') {
            steps {
                dir('app-front') {
                    sh """npm install
                        npm test -- --coverage --watchAll=false
                        """
                }
            }
        }

        stage('SonarQube Analysis'){
            steps {
                withCredentials([string(credentialsId: 'TOKEN_SONAR', variable:'TOKEN')]) {
                    sh """
                        cd app-front
                        sonar-scanner -Dsonar.token=$TOKEN -Dsonar.host.url=$SONAR_HOST_URL \
                        """
                }
            }
        }

        stage('Build React App & Docker image') {
            steps {
                dir('app-front') {
                    sh """npm run build
                        docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."""
                }
            }
        }

        stage('Archive Build') {
            steps {
                archiveArtifacts artifacts: 'app-front/build/**', fingerprint: true
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKER', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        def TAG = "${USER_DOCKER}/${IMAGE_NAME}:V-${BUILD_NUMBER}"
                        sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        TAG="${USER_DOCKER}/${IMAGE_NAME}:V-${BUILD_NUMBER}"
                        docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${TAG}
                        docker push ${TAG}
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo '✅ Contenerizado y subido a DockerHub.'
            }
        failure {
            echo '❌ fallo validar logs.'
        }
    }
}
